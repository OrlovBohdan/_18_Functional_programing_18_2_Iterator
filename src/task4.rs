#[test]

/*
/* Make it work */
fn main() {
    let arr = vec![0; 10];
    for i in arr {
        println!("{}", i);
    }

    println!("{:?}",arr);
}
*/
//1

fn main() {
    let arr = vec![0; 10];
    for i in arr.iter() {
        println!("{}", i);
    }

    // Тепер вектор доступний для повторного використання
    println!("{:?}", arr); // Виведе: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
}
//2

/*fn main() {
    let arr = vec![0; 10];
    for i in arr.into_iter() {
        println!("{}", i);
    }

    // Вектор вже переміщено і не доступний для подальшого використання
    // println!("{:?}", arr); // Помилка компіляції, оскільки arr більше не доступний
}*/
//3
/*fn main() {
    let mut arr = vec![0; 10];
    for i in arr.iter_mut() {
        *i += 1; // Змінюємо значення елементів вектора
    }

    // Тепер вектор доступний для подальшого використання
    println!("{:?}", arr); // Виведе: [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
}
*/



/*
//1
arr.iter() створює ітератор, який лише позичає елементи вектора без переміщення їх.
Після завершення циклу for вектор arr залишатиметься доступним для повторного використання.
//2
arr.into_iter() забирає власність на вектор, тому після циклу for вектор уже не можна використовувати.
Це дозволяє уникнути помилки, якщо ви не намагаєтесь використовувати вектор після циклу.
//3
arr.iter_mut() створює ітератор, який дає доступ до мутабельних посилань на елементи вектора.
Можно змінювати елементи вектора в циклі, і після цього вектор залишатиметься доступним для подальших операцій.
*/